[{"content":"Monitoring Kubernetes cluster with Prometheus Prometheus is a widely used open-source monitoring system that is commonly used for monitoring Kubernetes environments. In Kubernetes, Prometheus can be used to monitor various Kubernetes components such as pods, nodes, and services. Kubernetes provides an API that allows Prometheus to discover the endpoints of the different components and collect metrics from them. These metrics can include CPU usage, memory usage, network traffic, and other relevant information. Prometheus also provides a variety of built-in visualization tools such as Grafana, which can be used to visualize the collected metrics. This allows users to create dashboards that provide a high-level view of the cluster\u0026rsquo;s health and performance.\nThere are fundamentally two things that we can monitor in kubernetes system\nMonitor applications running on kubernetes infrastructure Monitor kubernetes cluster control plane components such as coreDNS, apiserver, kube scheduler kubelet(cAdvisor) which exposes container metrics kube-state-metrics which is basically the cluster level metrics around deployments, pod etc node-exporter which runs on all the nodes and exposes metrics around CPU, memory, network. Node exporter can be run on a kubernetes cluster in the following ways manually run in each nodes in the cluster use kubernetes daemonset which allows to run pod of node-exporter in all the nodes in the cluster Kubernetes doesn’t expose these metrics by default. For that we need to install kube state metrics container into our kubernetes environment and this container is responsible for making it available to the prometheus server.\nDeploying Prometheus There are multiple options to deploy prometheus.\nManually deploy premotheus on kubernetes. this requires manually creating all the deployments, configmaps, services secrets etc. Deploy using Helm chart to deploy prometheus operator Operators in Kubernetes A kubernetes operator is a method of packaging, deploying and managing a kubernetes application. A Kubernetes operator is an application-specific controller that extends the functionality of the Kubernetes API to create, configure, and manage instances of complex applications on behalf of a Kubernetes user.\nPrometheus operator The Prometheus Operator provides Kubernetes native deployment and management of Prometheus and related monitoring components. The Prometheus operator includes the following features:\nKubernetes Custom Resources: Use Kubernetes custom resources to deploy and manage Prometheus, AlertManager, and related components. Simplified Deployment Configuration: Configure the fundamentals of Prometheus like versions, persistence, retention policies, and replicas from a native Kubernetes resource. Prometheus Target Configuration: Automatically generate monitoring target configurations based on familiar Kubernetes label queries; no need to learn a Prometheus specific configuration language. user guide\nThis operator comes with several resources such as AlertManager, ServiceMonitor, PodMonitor, PrometheusRule, AlertManager config\nService Monitors The Prometheus operator comes with several custom resource definitions that provide a high level abstraction for deploying prometheus.\nkubectl get crd servicemonitors.monitoring.coreos.com 2023-04-24T12:28:54Z prometheusrules.monitoring.coreos.com 2023-04-24T12:28:54Z Service monitors define a set of targets for prometheus to monitor and scrape. They allow you to avoid touching prometheus configs directly and give you a declarative kubernetes syntax to define targets\nWriting and maintaining configuration in prometheus is a pain, that’s why there’s a thing called service monitor. A service monitor tells prometheus what services in kubernetes to monitor so if you have an arbitrary deployment with some pods running behind it and you’re exposing a service to that pod you can create a service monitor that uses a label selector to select the service and then in prometheus you can label the selectors to select the service monitors that prometheus needs to consume that’ll tell prometheus what service endpoints to start scraping to collect metrics.\nkubectl get servicemonitors.monitoring.coreos.com prometheus-kube-prometheus-prometheus -o yaml apiVersion: monitoring.coreos.com/v1 kind: ServiceMonitor metadata: annotations: meta.helm.sh/release-name: prometheus meta.helm.sh/release-namespace: default creationTimestamp: \u0026#34;2023-04-24T12:29:25Z\u0026#34; generation: 1 labels: app: kube-prometheus-stack-prometheus app.kubernetes.io/instance: prometheus app.kubernetes.io/managed-by: Helm app.kubernetes.io/part-of: kube-prometheus-stack app.kubernetes.io/version: 45.20.0 chart: kube-prometheus-stack-45.20.0 heritage: Helm release: prometheus name: prometheus-kube-prometheus-prometheus namespace: default resourceVersion: \u0026#34;193503\u0026#34; uid: 8be1b353-047e-4b9b-ba15-d1a6517cf2cd spec: endpoints: - path: /metrics port: http-web namespaceSelector: matchNames: - default selector: matchLabels: app: kube-prometheus-stack-prometheus release: prometheus self-monitor: \u0026#34;true\u0026#34; Installing Prometheus with Helm chart kube-prometheus stack is a collection of Kubernetes manifests, Grafana dashboards, and Prometheus rules combined with documentation and scripts to provide easy to operate end-to-end Kubernetes cluster monitoring with Prometheus using the Prometheus Operator\nGet Helm Repository Info helm repo add prometheus-community https://prometheus-community.github.io/helm-charts helm repo update Install Helm Chart helm install prometheus prometheus-community/kube-prometheus-stack This helm chart creates all the prometheus resources in the cluster\nTo see what it has created, let’s get all the resources\nkubectl get all NAME READY STATUS RESTARTS AGE pod/alertmanager-prometheus-kube-prometheus-alertmanager-0 2/2 Running 1 (11m ago) 13m pod/prometheus-grafana-6984c5759f-2wmlz 3/3 Running 0 14m pod/prometheus-kube-prometheus-operator-5f8db7f79c-j9z9t 1/1 Running 0 14m pod/prometheus-kube-state-metrics-7fbdd95dc4-nrj49 1/1 Running 0 14m pod/prometheus-prometheus-kube-prometheus-prometheus-0 2/2 Running 0 13m pod/prometheus-prometheus-node-exporter-5bzbv 1/1 Running 0 14m NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE service/alertmanager-operated ClusterIP None \u0026lt;none\u0026gt; 9093/TCP,9094/TCP,9094/UDP 13m service/kubernetes ClusterIP 10.96.0.1 \u0026lt;none\u0026gt; 443/TCP 13d service/prometheus-grafana ClusterIP 10.96.182.45 \u0026lt;none\u0026gt; 80/TCP 14m service/prometheus-kube-prometheus-alertmanager ClusterIP 10.111.178.253 \u0026lt;none\u0026gt; 9093/TCP 14m service/prometheus-kube-prometheus-operator ClusterIP 10.107.58.215 \u0026lt;none\u0026gt; 443/TCP 14m service/prometheus-kube-prometheus-prometheus ClusterIP 10.100.157.20 \u0026lt;none\u0026gt; 9090/TCP 14m service/prometheus-kube-state-metrics ClusterIP 10.102.14.155 \u0026lt;none\u0026gt; 8080/TCP 14m service/prometheus-operated ClusterIP None \u0026lt;none\u0026gt; 9090/TCP 13m service/prometheus-prometheus-node-exporter ClusterIP 10.96.1.108 \u0026lt;none\u0026gt; 9100/TCP 14m NAME DESIRED CURRENT READY UP-TO-DATE AVAILABLE NODE SELECTOR AGE daemonset.apps/prometheus-prometheus-node-exporter 1 1 1 1 1 \u0026lt;none\u0026gt; 14m NAME READY UP-TO-DATE AVAILABLE AGE deployment.apps/prometheus-grafana 1/1 1 1 14m deployment.apps/prometheus-kube-prometheus-operator 1/1 1 1 14m deployment.apps/prometheus-kube-state-metrics 1/1 1 1 14m NAME DESIRED CURRENT READY AGE replicaset.apps/prometheus-grafana-6984c5759f 1 1 1 14m replicaset.apps/prometheus-kube-prometheus-operator-5f8db7f79c 1 1 1 14m replicaset.apps/prometheus-kube-state-metrics-7fbdd95dc4 1 1 1 14m NAME READY AGE statefulset.apps/alertmanager-prometheus-kube-prometheus-alertmanager 1/1 13m statefulset.apps/prometheus-prometheus-kube-prometheus-prometheus 1/1 13m Resources created Let\u0026rsquo;s understand the important resources we have created\nDeployments kubectl get deployments NAME READY UP-TO-DATE AVAILABLE AGE deployment.apps/prometheus-grafana 1/1 1 1 14m deployment.apps/prometheus-kube-prometheus-operator 1/1 1 1 14m deployment.apps/prometheus-kube-state-metrics 1/1 1 1 14m Prometheus Grafana: is a graphical UI tool that is used to visualize the data that is there in the prometheus time series database Kube prometheus operator: this is the operator that is going to manage the lifecycle of the prometheus instance. It handles the update of configs, restart the process upon changes in the config Kube state metrics: container for exposing cluster level metrics such as deployments, pods, services StatefulSet kubectl get statefulset NAME READY AGE statefulset.apps/alertmanager-prometheus-kube-prometheus-alertmanager 1/1 13m statefulset.apps/prometheus-prometheus-kube-prometheus-prometheus 1/1 13m Prometheus server: this is a container that’s running the prometheus process AlertManager: alert manager instance Daemonset kubectl get daemonset NAME DESIRED CURRENT READY UP-TO-DATE AVAILABLE NODE SELECTOR AGE daemonset.apps/prometheus-prometheus-node-exporter 1 1 1 1 1 \u0026lt;none\u0026gt; 14m Node exporter: responsible for deploying a node exporter pod on every single node in the cluster and this pod is responsible for collecting host metrics such as CPU utilization, memory utilization and exposes it to prometheus server Connecting to prometheus server The prometheus service is of type clusterIP and can be accessed from within the cluster. To connect to the prometheus server from outside the cluster we can either make the service of type nodeport or load balancer or use an ingress to route traffic to the service.\nwe can also port forward the prometheus pod to access it locally\nkubectl port-forward prometheus-prometheus-kube-prometheus-prometheus-0 9090 Prometheus kubernetes configuration Kubernetes SD configurations allow retrieving scrape targets from Kubernetes REST API and always staying synchronized with the cluster state. One of the following role types can be configured to discover targets.\nrole service node pod endpoints endpointsslice ingress The default config uses the role endpoint because the endpoint role discovers targets from listed endpoints of a service and thus we can basically discover pods, services, nodes and everything else using the endpoints\nkubernetes_sd_configs: - role: endpoints kubeconfig_file: \u0026#34;\u0026#34; follow_redirects: true enable_http2: true namespaces: own_namespace: false names: - default Prometheus Rules To add rules, prometheus operator has a CRD called prometheusrule which handles registering new rules to a prometheus instance\nkubectl get prometheusrules.monitoring.coreos.com ","permalink":"http://kshnsink.com/posts/kubernetes-prometheus-monitoring/","summary":"Monitoring Kubernetes cluster with Prometheus Prometheus is a widely used open-source monitoring system that is commonly used for monitoring Kubernetes environments. In Kubernetes, Prometheus can be used to monitor various Kubernetes components such as pods, nodes, and services. Kubernetes provides an API that allows Prometheus to discover the endpoints of the different components and collect metrics from them. These metrics can include CPU usage, memory usage, network traffic, and other relevant information.","title":"Kubernetes Prometheus Monitoring"},{"content":"Ingress vs Gateway API Ingress supports the following HTTP host matching HTTP path matching TLS termination Routing to service:port For many different load balancer implementations Gateway adds HTTP header-based matching HTTP header manipulation Weighted traffic splitting Traffic mirroring Role-oriented resource model and has extensibility for Arbitrary backend CRD references (buckets, functions, etc) Routing for other protocols(gRPC) Custom parameters or configuration (LB algos, custom match types, etc) Gateway controller manage the network infrastructure on behalf of Gateway resources. There are one or more Gateway classes supported by a Gateway controller. Gateways are created from the Gateway classes and they model the actual network infrastructure which processes the traffic. Gateways can model many different kinds of data planes that perform routing.\nThen comes the route resources. Gateway and the HTTP route resources do what the ingress resource does as a single resource. This separation allows different roles to deploy and own that resource. It allows a cluster administrator to mange the Gateway and the policies attached to that Gateway, while individual development teams manage the routing to their application on their own.\nRoles involved Infrastructure Provider ensures that each cluster is provisioned with a GatewayClass ****for external load balancers\nkind: GatewayClass metadata: name: external-lb spec: controller: mygroup.io/gateway parametersRef: group: k8s.mygroup.io kind: GatewayClassParams name: external-lb Cluster Operator Creates a Gateway for the mygroup team when setting up the cluster\nkind: Gateway metadata: name: mygroup-external spec: gatewayClassName: external-lb listeners: - protocol: HTTP port: 80 routes: kind: HTTPRoute selector: matchLebels: gateway: mygroup-external Application Developer creates an HTTPRoute to route external traffic to the application\nkind: HTTPRoute metadata: name: mygroup labels: gateway: mygroup-external spec: hostnames: - mygroup.io rules: - matches: path: value: /groups forwardTo: serviceName: mygroup-groups port: 8080 Features Canary Rollout Application developer wants to do a canary rollout\nkind: HTTPRoute ... rules: - matches: path: value: /groups forwardTo: - serviceName: mygroup-groups port: 8080 weight: 90 - serviceName: mygroup-groups-canary port: 8080 weight: 10 Upgrade Load Balancer Cluster operator wants to upgrade to the newest kind of LB\nkind: Gateway metadata: name: mygroup-external spec: gatewayClassName: new-external-lb listeners: - protocol: HTTP port: 80 routes: kind: HTTPRoute selector: matchLebels: gateway: mygroup-external Update Infrastructure Provider Infrastructure provider wants to provision on a new provider\nkind: GatewayClass metadata: name: external-lb spec: controller: new-vendor.io/gateway parametersRef: group: k8s.mygroup.io kind: GatewayClassParams name: external-lb ","permalink":"http://kshnsink.com/posts/intro-to-gateway-api/","summary":"Ingress vs Gateway API Ingress supports the following HTTP host matching HTTP path matching TLS termination Routing to service:port For many different load balancer implementations Gateway adds HTTP header-based matching HTTP header manipulation Weighted traffic splitting Traffic mirroring Role-oriented resource model and has extensibility for Arbitrary backend CRD references (buckets, functions, etc) Routing for other protocols(gRPC) Custom parameters or configuration (LB algos, custom match types, etc) Gateway controller manage the network infrastructure on behalf of Gateway resources.","title":"Intro to Gateway API"},{"content":"In this post, we look at how to overcome slow queries by analysing them with Explain and Analyze, and using indexes to modify and enhance the query timings.\nPostgres supports different kinds of indexing on the table for querying faster.\nMultiple column indexes A multi-column B-Tree index can be used with query conditions that involve any subset of the index\u0026rsquo;s columns. This index is most efficient when there are constraints on the leading (leftmost) columns. The exact rule is that equality constraints on leading columns, plus any inequality constraints on the first column that does not have an equality constraint, will be used to limit the portion of the index that is scanned.\nCover-Index An index containing all the columns needed for a query, which is there in the select statement.\nUnique Index A unique index is an index used to enforce uniqueness of a column\u0026rsquo;s value or the uniqueness of a combined value of more than one column.\nOne of the most misunderstood concepts around indexing is to understand where to use a primary key, unique constraint, or unique index. Let\u0026rsquo;s understand this using a problem:\nProblem statement We require maximum performance with no duplicate data. Which is the better approach? Primary key, unique constraint or unique index?\nSolution Note: Multiple null values are not equal, so they are not considered as a duplicate record.\nPostgres automatically creates a unique index in the table when a primary key and unique constraint is defined in the table. Creating unique constraint then would be redundant, and unnecessarily creating indexes degrades the performance of Postgres. According to suggestions by the Postgres product team, create a unique constraint on the table and then there is no need to create a unique index on those columns. Postgres creates an index for the defined primary key itself When we create a unique constraint, Postgres automatically creates an index behind the scene. However, there are cases where even indexing can\u0026rsquo;t improve performance. One such case is when we do case-insensitive searches. Let\u0026rsquo;s understand the difference between the query cost in case of case sensitive and case insensitive search in our scheme table. Given we have an index on the column scheme_name.\nEXPLAIN ANALYSE SELECT * FROM schemes where scheme_name = \u0026#39;weekend_scheme\u0026#39; QUERY PLAN | Index scan using idx_scheme_name on schemes (cost=0.28..8.29 rows=1 width=384) Planning Time: 0.155 ms Execution Time: 0.063ms\nEXPLAIN ANALYSE SELECT * FROM schemes where lower(scheme_name) = \u0026#39;weekend_scheme\u0026#39; QUERY PLAN | Seq Scan on schemes (cost=0.00..69.00 rows=5 width=384) Filter: (lower((scheme_name) :: text) = \u0026lsquo;weekend_scheme\u0026rsquo; :: text) Rows removed by filter: 999 Planning Time: 0.119 ms Execution Time: 0.721ms\nEven though we have an index created at scheme_name, the function lower degrades the performance as it does an additional effort of converting all the values of scheme_table to lower case.\nCases when an index is not used (although it is defined).\nLIKE '%scheme' will never use an index, but LIKE 'scheme%' can possibly use the index. The upper/lower case function used in where clause. So whenever we want to use a function in our where clause, we could create the index in the following way to optimise the query.\nCREATE INDEX idx_scheme_name ON schemes (lower(scheme_name)) EXPLAIN ANALYSE SELECT * FROM schemes where lower(scheme_name) = \u0026#39;weekend_scheme\u0026#39; QUERY PLAN | Bitmap heap scan on schemes ((cost=4.32..19.83 rows=5 width=384)) Recheck cond: (lower ((scheme_name) :: text) = \u0026lsquo;weekend_scheme\u0026rsquo; :: text) Heap Blocks: exact=1 Bitmap scan on schemes ((cost=0.00..4.32 rows=5 width=0)) Index cond: (lower ((scheme_name) :: text) = \u0026lsquo;weekend_scheme\u0026rsquo; :: text) Planning Time: 1.784 ms Execution Time: 0.079 ms\nPartial Index Postgres supports an index over a subset of the rows of a table (known as a partial index). It\u0026rsquo;s often the best way to index our data if we want to repeatedly analyse rows that match a given WHERE clause. Let us see how we can enhance the performance of Postgres using partial indexing.\nProblem statement We want to return all the schemes which are supposed to run before 11:00 am.\nSolution EXPLAIN ANALYSE SELECT * FROM schemes WHERE start_time \u0026lt; \u0026#39;10:00:00\u0026#39; QUERYEXPLAIN ANALYSE SELECT * FROM schemes where lower(scheme_name) = \u0026lsquo;weekend_scheme\u0026rsquo; PLAN | Seq Scan on schemes (cost=0.00..66.50 rows=9 width=23) Filter: (start_time \u0026lt; \u0026lsquo;10:00:00\u0026rsquo;) Rows removed by filter: 991 Planning Time: 0.082 ms Execution Time: 0.226 ms\nWe can create an index on start_time column but assuming we have a huge database, this may not be optimal for insert, update and delete. So we create an index with a condition. This kind of indexing is used when we know what we need from our select queries. Say we do a heavy read on all the schemes which are started before 10:00:00 and not much when started later.\nCREATE INDEX idx_scheme_name ON schemes start_time WHERE start_time \u0026lt; \u0026#39;11:00:00\u0026#39; EXPLAIN ANALYSE SELECT * FROM schemes WHERE start_time \u0026lt; \u0026#39;10:00:00\u0026#39; QUERY PLAN | Bitmap heap scan on schemes ((cost=4.21..29.30 rows=9 width=23)) Recheck cond: (start_time \u0026lt; \u0026lsquo;10:00:00\u0026rsquo;) Heap Blocks: exact=8 Bitmap index scan on schemes ((cost=0.00..4.21 rows=9 width=0) Index cond: (start_time \u0026lt; \u0026lsquo;10:00:00\u0026rsquo;) Planning Time: 1.729 ms Execution Time: 0.075 ms\nThis reduces the execution time from 0.226to 0.075. Let\u0026rsquo;s validate that we have not indexed all the schemes where start_time is after 11:00 AM.\nEXPLAIN ANALYSE SELECT * FROM schemes WHERE start_time \u0026gt;\u0026#39;12:00:00\u0026#39; QUERY PLAN | Seq Scan on schemes (cost=0.00..66.50 rows=6 width=23) Filter: (start_time \u0026lt; \u0026lsquo;12:00:00\u0026rsquo;) Rows removed by filter: 993 Planning Time: 0.101 ms Execution Time: 0.228ms\nThis proves that partial data from schemes table is indexed and the rest of the data is not indexed. Our index size is very small and easy to maintain, helping in the maintaining task of reindexing.\nQuery plan on JOINS The optimizer needs to pick the correct join algorithm when there are multiple tables to be joined in the select statement. Postgres uses 3 different kinds of join algorithm based on the type of join we are using.\nNested Loop: Here, the planner can use either sequential scan or index scan for each of the elements in the first table. The planner uses a sequential scan when the second table is small. The basic logic of choosing between a sequential scan and index scan applies here too. Hash Join: In this algorithm, the planner creates a hash table of the smaller table on the join key. The larger table is then scanned, searching the hash table for the rows which meet the join condition. This requires a lot of memory to store the hash table in the first place. Merge Join: This is similar to merge sort algorithm. Here the planner sorts both the tables to be joined on the join attribute. The tables are then scanned in parallel to find the matching values.\nEXPLAIN SELECT schemes.rules FROM scheme_rules JOIN schemes ON (scheme_rules.scheme_id = schemes.id ) where scheme_name = \u0026#39;weekend_scheme\u0026#39;; Downsides of indexes in production environments Finding unused indexes In a large production environment, finding unused indexes is advisable, because indexes eat memory. Postgres wiki page details how we can find index summary, duplicate indexes, and index size.\nCREATE/DROP index vs CREATE/DROP index concurrently Creating and dropping an index in a large database can take hours or even days and the CREATE INDEX command blocks all the writes on a table (it doesn\u0026rsquo;t block the reads, but this is still not ideal).\nHowever, an index created concurrently with CREATE INDEX CONCURRENT will not acquire locks against writes. When creating index concurrently, Postgres first scans the table to build indexes and runs the index once again for the things to be added since the first pass.\nCreating an index concurrently also has a downside though. If something goes wrong during the process, it does not roll back, and leaves an invalid index behind. Invalid indexes can be found using the following query.\nSELECT * FROM pg_class, pg_index WHERE pg_index.indisvalid = false AND pg_index.indexrelid = pg_class.oid; Rebuilding indexes REINDEX rebuilds an index using the data stored in the index table, replacing the old copy of the index. If we suspect corruption of an index on a table, we can simply rebuild that index, or all indexes on the table, using REINDEX INDEX or REINDEX TABLE\nREINDEX is similar to a drop and recreate of the index in that the index contents are rebuilt from scratch. However, locking considerations are rather different. REINDEX locks out writes but not reads of the index\u0026rsquo;s parent table. It also takes an exclusive lock on the specific index being processed, which will block reads that attempt to use that index.\nAnother option is to drop index concurrently and create again concurrently.\nConclusion This post aimed to provide an overview of how Postgres queries the database. By understanding query plans better and carefully taking measures (mostly through indexes), we can get the best performance out of the Postgres database.\nFurther Reading Index locking consideration Locking indexes Routine reindexing Examining index usage Monitoring stats ","permalink":"http://kshnsink.com/posts/postgres-performance-tuning-manualindexes/","summary":"In this post, we look at how to overcome slow queries by analysing them with Explain and Analyze, and using indexes to modify and enhance the query timings.\nPostgres supports different kinds of indexing on the table for querying faster.\nMultiple column indexes A multi-column B-Tree index can be used with query conditions that involve any subset of the index\u0026rsquo;s columns. This index is most efficient when there are constraints on the leading (leftmost) columns.","title":"Postgres Performance Tuning Manual: Indexes"},{"content":"Postgres is one of the most widely used open source databases in the world. At GOJEK, a lot of our products depend on Postgres as well. A lot of major companies use Postgres as their main database however when you\u0026rsquo;re building and operating at scale, the volume of data passing through the pipelines can slow down the most efficient systems.\nTo optimise things in order to enhace performace, we can target the brain of the database whhich is optimizer. Optimizer interprets queries and determines the fastest method of execution. A single query optimization technique can increase database performance drastically.\nThis post outlines how to analyse Postgres performance using tools such as EXPLAIN and ANALYZE (which Postgres provides).\nMeet EXPLAIN \u0026amp; ANALYZE EXPLAIN gives an exact breakdown of a query. The execution plan is based on the statistics about the table, and it identifies the most efficient path to the data. This takes different database paradigms (such as indexes) into consideration. EXPLAIN only guesses a plan that it thinks it will execute. This is where ANALYZE comes into the picture. ANALYZE basically runs a query to find the processing time to execute a query.\nTo quickly summarise, EXPLAIN and ANALYZE commands help improve database performance in Postgres by:\na. Displaying the execution plan that the PostgreSQL planner generates for the supplied statement.\nb. Actually running the command to show the run time.\nFinding the framework Let\u0026rsquo;s consider we have a table named schemes.\nEXPLAIN SELECT * FROM schemes; QUERY PLAN | Seq Scan on schemes (cost=0.00..64 rows=328 width=479)\nSELECT * FROM pg_class where relname = \u0026#39;schemes\u0026#39;; pg_class has the metadata about the tables.\nCost in the query plan is calculated using the following formula\nCOST = (disk read pages x seq_page_cost) + (rows scanned x cpu_tuple_cost).\nDisk read pages and rows scanned are the properties of pg_class. Seq page cost is the estimated cost of disk read fetch. Cpu tuple cost is the estimated cost of processing each row. eg., COST (54 x 1.0) + (1000 x .01) = 64 Let\u0026rsquo;s see how the query plan changes when we apply filters in the select statement.\nEXPLAIN SELECT * FROM schemes WHERE status = \u0026#39;active\u0026#39;; QUERY PLAN | Seq Scan on schemes (cost=0.00..66.50 rows=960 width=384) Filter: ((status)::text = \u0026lsquo;active\u0026rsquo;::text)\nThe estimated cost here is higher than the previous query, this is because Postgres is performing a seq scan over 1000 rows first and then filtering out the rows based on the WHERE clause.\nPlanner cost constants The cost variables described in this section are measured on an arbitrary scale. Only their relative values matter, hence scaling them all up or down by the same factor will result in no change in the planner\u0026rsquo;s choices. By default, these cost variables are based on the cost of sequential page fetches; that is, seq_page_cost is conventionally set to 1.0 and the other cost variables are set with reference to that. But you can use a different scale if you prefer, such as actual execution times in milliseconds on a particular machine.\nUnfortunately, there is no well-defined method for determining ideal values for the cost variables. They are best treated as averages over the entire mix of queries that a particular installation will receive. This means that changing them on the basis of just a few experiments is very risky. Refer planner cost constants].\nEXPLAIN SELECT schemes.rules FROM scheme_rules JOIN schemes ON (scheme_rules.scheme_id = schemes.id ) where scheme_name = \u0026#39;weekend_scheme\u0026#39;; The query planner sometimes decides to use a two-step plan. The reason for using two-plan node is the first plan sorts the row locations identified by the index into physical order before reading them, and the other plan actually fetches those rows from the table.\nDown to the nuts and bolts The first plan which does the sorting is called Bitmap scan.\nMost common occurring matches are scanned using the seq scan and the least common matches are scanned using index scan, anything in between is scanned using bitmap heap scan followed by an index scan. One of the reasons for this is that the random I/O is very slow as compared to sequential I/O. This is all driven by analysing statistics.\nBitmap heap scan A bitmap heap scan is like a seq scan - the difference being, rather than visiting every disk page, it scans ANDs and ORs of the applicable index together and only visits the disk pages it needs to visit. This is different from index scan where the index is visited row by row in order, which results in disk pages being visited multiple times. A bitmap scan will sequentially open a short list of disk pages and grab every applicable row in each one.\nSequential scan vs index scan There are cases where a sequential scan is faster than an index scan. When reading data from a disk, a sequential method is usually faster than reading in random order. This is because an index scan requires several I/O for each row which includes looking up a row in the index, and based on that, looking up and retrieving the row from memory(heap). On the other hand, a sequential scan requires a single I/O operation to retrieve more than one block containing multiple rows.\nQuery plan on JOINS The optimizer needs to pick the correct join algorithm when there are multiple tables to be joined in the select statement. Postgres uses three different kinds of join algorithms based on the type of join we are using.\nLet\u0026rsquo;s dive in\nNested Loop: Here the planner can use either a sequential scan or index scan for each of the elements in the first table. The planner uses a sequential scan when the second table is small. The basic logic of choosing between a sequential scan and index scan applies here too. Hash Join: In this algorithm, the planner creates a hash table of the smaller table on the join key. The larger table is then scanned, searching the hash table for the rows which meet the join condition. This requires a lot of memory to store the hash table in the first place. Merge Join: This is similar to merge sort algorithm. Here the planner sorts both the tables to be joined on the join attribute. The tables are then scanned in parallel to find the matching values.\nFurther reading on how we can use Explain/Analyze with join statements here\nPostgres performance tuning is a complicated task. The complexity comes in identifying the appropriate \u0026rsquo;tunable\u0026rsquo; from the many tools that Postgres provides. As you might have now guessed, there is no silver bullet to solving performance issues in Postgres - it\u0026rsquo;s the use case that dictates the tuning requirements. 😅\nHope this helped. Keep following the blog for more updates! 🙂\n","permalink":"http://kshnsink.com/posts/postgres-performance-tuning-manualquery-plans/","summary":"Postgres is one of the most widely used open source databases in the world. At GOJEK, a lot of our products depend on Postgres as well. A lot of major companies use Postgres as their main database however when you\u0026rsquo;re building and operating at scale, the volume of data passing through the pipelines can slow down the most efficient systems.\nTo optimise things in order to enhace performace, we can target the brain of the database whhich is optimizer.","title":"Postgres Performance Tuning Manual: Query Plans"},{"content":"A VPC native cluster uses three unique subnet ranges to allocate IPs to Nodes, Pods and Services.\nPrimary subnet IP address is used for Nodes. Node IP provides connectivity from control components like kube-proxy and kubelet to the Kubernetes API server. Node IP is the node’s connection to the rest of the cluster.\nSecondary subnet IP address is used for Pods. Pod IP addresses are natively routable within the cluster’s VPC network and other VPC networks connected to it by VPC Network Peering. By default GKE allocates /24 alias ie., 256 alias IP addresses for 110 pods for each of the nodes.\nAnother Secondary subnet IP address is used for services. Each Service has an IP address, called the ClusterIP, assigned from the cluster’s VPC network.\nIn a VPC native cluster, these addresses are reserved before the creation of cluster to eliminate conflict and overlapping of IPs.\nWhat happens when the secondary IP range exhausts?\nOnce the secondary IP address exhausts no Pods can be scheduled. The secondary Pod IP range cannot be changed once created. There is a provision to allocate a separate IP range to create separate node pools in the cluster. These two IP ranges are going to be discontigous and there are some caveats which needs to be taken care of.\nIf you use ip-masq-agent configured with the nonMasqueradeCIDRs parameter, you must update the nonMasqueradeCIDRs to include all Pod CIDR ranges.\nIf you use NetworkPolicy configured with ipBlock to specify traffic, you must update the cidr value to include all Pod CIDR ranges.\nThe other approach is to create a bigger CIDR range node pool and move workloads from the existing node pool to the newly created one. Steps for the same:\nMark the nodes in the existing node pool to be non schedulable by using the kubernetes cordon command\nkubectl cordon \u0026lt;node-name\u0026gt;\nRedeploy the application and verify if the nodes are scheduling in the nodes of new node pool\nOnce verified, redeploy and move all the workloads in the new node pool.\nClean up and delete the old node pool.\n","permalink":"http://kshnsink.com/posts/extend-cidr/","summary":"A VPC native cluster uses three unique subnet ranges to allocate IPs to Nodes, Pods and Services.\nPrimary subnet IP address is used for Nodes. Node IP provides connectivity from control components like kube-proxy and kubelet to the Kubernetes API server. Node IP is the node’s connection to the rest of the cluster.\nSecondary subnet IP address is used for Pods. Pod IP addresses are natively routable within the cluster’s VPC network and other VPC networks connected to it by VPC Network Peering.","title":"Extend CIDR"}]